<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>隐逸山林</title>
  <subtitle>阿熊的足迹</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nickfan.github.io/"/>
  <updated>2018-12-25T08:22:59.822Z</updated>
  <id>https://nickfan.github.io/</id>
  
  <author>
    <name>nickfan</name>
    <email>nickfan81@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿熊的Caddy+Hugo+Acme.sh配置填坑笔记</title>
    <link href="https://nickfan.github.io/2018/01/05/caddy-hugo-acme/"/>
    <id>https://nickfan.github.io/2018/01/05/caddy-hugo-acme/</id>
    <published>2018-01-05T04:04:38.000Z</published>
    <updated>2018-12-25T08:22:59.822Z</updated>
    
    <content type="html"><![CDATA[<h2>前言</h2><p>最近想比较一下caddy和nginx的服务及功能，</p><p>设定的目标是用hugo搭建一个静态站点然后通过Caddy服务起来提供</p><p>https://axiong.me 的访问。</p><p>于是就走上了一条不断踩坑的不归路，在此记录一下踩坑、填坑的过程。</p><h3>第〇个踩到的坑：github的CNAME站点不支持https</h3><p>理论上站点也可以放在github的gh-pages上，所以我就尝试了</p><p><a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/" target="_blank" rel="external">Hugo托管到Github的流程说明</a></p><p><strong>Tips</strong></p><p>我用的是gh-pages的分支方案 项目master分支根节点可以加gitignore忽略掉hugo的发布路径public，方便测试 注意安装主题的话最好用submodule的方式而不是文档中的git clone,比如：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submodule add https://github.com/christianmendoza/hugo-smpl-theme themes/hugo-smpl-theme</div></pre></td></tr></table></figure><p></p><p>这样后续部署的时候才不会遇到尴尬的项目没法自动部署的问题。</p><p><strong>问题</strong></p><p>github的CNAME站点不支持https</p><p>不过@根域名CNAME记录和MX记录TXT记录冲突，蛋疼（免费邮局服务不想放），而且MD不支持https，所以，方案被我毙掉了。</p><p><strong>解决方案</strong></p><p>自己有vps就可以任性一下了，也顺便捣腾一下Caddy的https服务</p><h3>第一个踩到的坑：Caddy自动申请证书不成功</h3><p>就是Caddy自动申请 Let's Encrypt 的请求总是总是timeout， 不知道是不是因为解析服务用cloudxns的问题，而caddy目前还没有cloudxns的组件。</p><p><strong>解决方案</strong></p><p>用 <a href="https://github.com/Neilpang/acme.sh" target="_blank" rel="external">Acme.sh</a> 这个自动脚本做配置做证书的issue和renew，注意要采用dns的api模式,毕竟到这一步Caddy的服务还被申请证书卡着。</p><p>参考：<a href="https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="external">Acme.sh说明</a></p><h4>1. 证书申请</h4><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">acme.sh --issue --dns -d axiong.me</div></pre></td></tr></table></figure><p></p><h4>2. 到解析服务商后台添加对应的Txt记录</h4><p>我的是cloudxns基本上就是加一条的Txt类型记录，_acme-challenge为主host部分记录，内容部分是acme终端中给出的。</p><h4>3. 重新生成证书</h4><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">acme.sh  --renew   -d axiong.me</div></pre></td></tr></table></figure><p></p><h4>4. 到你的解析服务商后台申请API的key和secret</h4><p><strong>参考链接</strong></p><p><a href="https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md" target="_blank" rel="external">Acme.sh的DNSApi的配置说明</a></p><h4>5. 导出/安装证书到本地供后续Caddy使用</h4><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">acme.sh  --installcert  -d axiong.me --key-file /etc/ssl/caddy/certs/axiong.me/ssl.key --fullchain-file /etc/ssl/caddy/certs/axiong.me/fullchain.cer --reloadcmd &quot;systemctl restart caddy&quot;</div></pre></td></tr></table></figure><p></p><p>按照acme.sh的说明，它的crontab脚本会自动续期证书。</p><p>免费ssl证书问题至此算是告一段落。</p><h3>第二个踩到的坑：Caddy+Hugo组合配置问题</h3><p>网上有Caddy+Hugo的教程:</p><ul><li>http://www.gohugo.org/post/qhsong-host-hugo-blog-using-caddy/</li><li>https://laozhu.me/post/deploy-blog-with-caddy-and-hugo/</li></ul><p>都有一些小坑，比如：</p><ul><li>caddy的插件有依赖必须通过他官方的服务整合编译，上面的配置中依赖http.hugo,http.minify,http.git等</li><li>caddy的官方下载如果插件加多了很可能给你返回500，安装失败</li><li>caddy的hugo插件，hugo指令必须是环境变量里支持的，我适用golang开发环境的hugo如果作为系统服务就会找不到</li><li>caddy的配置问题，errors节点里不能配置log指令</li></ul><p><strong>解决方案</strong></p><p>查文档，看官方说明，例子。</p><h4>1. caddy+插件下载问题，至少需要http.git,http.minify,http.hugo</h4><p>精简插件数量只装必要的</p><p>Caddy官方的下载页面可以定制，定制完毕页面最下方有命令行指令参考</p><p>https://caddyserver.com/download</p><p>一键安装指令：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl https://getcaddy.com | bash -s personal dns,hook.service,http.git,http.hugo,http.minify,tls.dns.rfc2136</div></pre></td></tr></table></figure><p></p><p>或者用下载链接下载后解压缩后把caddy放到/usr/local/bin/caddy</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -O &quot;caddy.tar.gz&quot; &quot;https://caddyserver.com/download/linux/amd64?plugins=dns,hook.service,http.git,http.hugo,http.minify,tls.dns.rfc2136&amp;license=personal&quot;</div></pre></td></tr></table></figure><p></p><h4>2. hugo指令必须是环境变量里支持的,去官方直接下载发行版的安装包</h4><p>注意apt-get或者snap安装的版本会比较老，建议直接去 https://github.com/gohugoio/hugo/releases 下载 比如ubuntu用的.deb的包 下载后安装</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dpkg -i hugo_xxx_Linux-64bit.deb</div></pre></td></tr></table></figure><p></p><h3>第三个踩到的坑：Caddy的ulimit问题</h3><p>其实不算是Caddy的锅，系统的limits配置我的vps没调整，Caddy会报</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">caddy: WARNING: File descriptor limit 1024 is too low for production servers. At least 8192 is recommended. Fix with &quot;ulimit -n 8192&quot;.</div></pre></td></tr></table></figure><p></p><p><strong>解决方案</strong></p><p>临时解决方案就是执行提示里的</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ulimit -n 8192</div></pre></td></tr></table></figure><p></p><p>再跑caddy，彻底的解决方案是修改系统的limits配置：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/security/limits.conf</div></pre></td></tr></table></figure><p></p><p>追加 对文件句柄的配置设定</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* soft nofile 65535</div><div class="line">* hard nofile 65535</div><div class="line">* soft nproc 65535</div><div class="line">* hard nproc 65535</div></pre></td></tr></table></figure><p></p><h3>第四个踩到的坑：Caddy的默认端口是2015</h3><p>Caddy的配置有个坑，如果tls不是他它自动签发的模式，的情况下 http的端口用的是2015。</p><p>参见</p><ul><li>https://github.com/mholt/caddy/issues/651</li><li>https://github.com/mholt/caddy/issues/1673</li></ul><p><strong>解决方案</strong></p><p>手工配置自动跳转</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">http://axiong.me &#123;</div><div class="line">    redir https://axiong.me</div><div class="line">&#125;</div><div class="line">https://axiong.me &#123;</div><div class="line">  tls ssl.cer ssl.key</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h3>第五个踩到的坑：Caddy自启动的Systemd配置问题</h3><p>配置Caddy的Systemd自启动遇到</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">caddy.service: Failed at step NAMESPACE spawning /usr/local/bin/caddy: No such file or directory</div></pre></td></tr></table></figure><p></p><p>启动不了</p><p>参考 https://caddy.community/t/starting-with-systemd-failed-at-step-namespace-spawning-usr-local-bin-caddy-no-such-file-or-directory/423</p><p>改吧改吧，然后转角遇到爱，尼玛，又出现</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ExecStart=/usr/local/bin/caddy -log stdout -agree=true -conf=/etc/caddy/Caddyfile -root=/var/tmp (code=exited, status=226/NAMESPACE)</div><div class="line"> Main PID: xxx (code=exited, status=226/NAMESPACE)</div></pre></td></tr></table></figure><p></p><p><strong>解决方案</strong></p><p>死活找不到原因，怒了，重新按社区贡献的配置文档重新整了一遍，</p><p>参考 https://github.com/mholt/caddy/tree/master/dist/init/linux-systemd 文档，并下载caddy.service作为模板</p><p>重新一步步把用户权限配置了一遍，搞定，不在出现226/NAMESPACE问题。</p><h3>优化完善Caddy配置</h3><h4>查Caddy的官方文档，完整的解决配置文件Caddyfile内容问题</h4><p>修改后的完整示例：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">http://axiong.me &#123;</div><div class="line">    redir https://axiong.me</div><div class="line">&#125;</div><div class="line">https://axiong.me &#123;</div><div class="line">    #tls off</div><div class="line">    #tls admin@example.com</div><div class="line">    tls /etc/ssl/caddy/certs/axiong.me/fullchain.cer /etc/ssl/caddy/certs/axiong.me/ssl.key</div><div class="line">    minify</div><div class="line">    gzip</div><div class="line">    log / /var/log/caddy/pub-axiong.me_access.log &quot;&#123;combined&#125;&quot; &#123;</div><div class="line">        rotate_size 100 # Rotate a log when it reaches 100 MB</div><div class="line">        rotate_age  14  # Keep rotated log files for 14 days</div><div class="line">        rotate_keep 10  # Keep at most 10 rotated log files</div><div class="line">        rotate_compress # Compress rotated log files in gzip format</div><div class="line">    &#125;</div><div class="line">    errors /var/log/caddy/pub-axiong.me_error.log &#123;</div><div class="line">        404 404.html # Not Found</div><div class="line">        rotate_size 100 # Rotate a log when it reaches 100 MB</div><div class="line">        rotate_age  14  # Keep rotated log files for 14 days</div><div class="line">        rotate_keep 10  # Keep at most 10 rotated log files</div><div class="line">        rotate_compress # Compress rotated log files in gzip format</div><div class="line">    &#125;</div><div class="line">    root /var/www/axiong.me/public</div><div class="line">    git &#123;</div><div class="line">        repo https://github.com/nickfan/axiong.me</div><div class="line">        path /var/www/axiong.me</div><div class="line">        then hugo --destination=/var/www/axiong.me/public</div><div class="line">        hook /webhook [你在github后台设置的webhook的口令]</div><div class="line">        hook_type github</div><div class="line">        clone_args --recursive</div><div class="line">        pull_args --recurse-submodules</div><div class="line">        interval 3600</div><div class="line">    &#125;</div><div class="line">    hugo</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>其中webhook就是你代码托管服务比如github上代码repo后台设定中添加一下webhook这样代码提交以后就会自动构建你的新静态网站 比如我的托管在github上webhook.settings设定在 https://github.com/nickfan/axiong.me/settings/hooks</p><p>添加webhook,PayloadURL填写你域名/webhook，比如我的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://axiong.me/webhook</div></pre></td></tr></table></figure><p></p><p>content-type选json secret填写和Caddyfile中的口令保持一致 其他保持默认即可。</p><p>至此Caddy才算是初步可以看了。</p><ul><li>有访问日志、有错误日志，日志都有rotate不会撑满磁盘。</li><li>有minify+gzip做输出优化</li><li>免费自定义ssl证书，有钱你换DV,OV级别的我也没意见</li><li>自动http-&gt;https跳转</li><li>改完站点提交代码后webhook自动发布上线</li></ul><h3>TODO</h3><p>webhook的配置可以从Caddyfile配置中用环境变量替换出来，放到Systemd的附加配置里，比如加个override.conf之类的，更完善。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;前言&lt;/h2&gt;&lt;p&gt;最近想比较一下caddy和nginx的服务及功能，&lt;/p&gt;&lt;p&gt;设定的目标是用hugo搭建一个静态站点然后通过Caddy服务起来提供&lt;/p&gt;&lt;p&gt;https://axiong.me 的访问。&lt;/p&gt;&lt;p&gt;于是就走上了一条不断踩坑的不归路，在此记录一下踩
    
    </summary>
    
      <category term="dev" scheme="https://nickfan.github.io/categories/dev/"/>
    
      <category term="env" scheme="https://nickfan.github.io/categories/dev/env/"/>
    
    
      <category term="linux" scheme="https://nickfan.github.io/tags/linux/"/>
    
      <category term="caddy" scheme="https://nickfan.github.io/tags/caddy/"/>
    
      <category term="hugo" scheme="https://nickfan.github.io/tags/hugo/"/>
    
      <category term="https" scheme="https://nickfan.github.io/tags/https/"/>
    
      <category term="systemd" scheme="https://nickfan.github.io/tags/systemd/"/>
    
  </entry>
  
  <entry>
    <title>android终端环境配置</title>
    <link href="https://nickfan.github.io/2017/08/20/android-termux/"/>
    <id>https://nickfan.github.io/2017/08/20/android-termux/</id>
    <published>2017-08-20T02:27:49.000Z</published>
    <updated>2018-12-25T08:22:59.822Z</updated>
    
    <content type="html"><![CDATA[<h2>效果图</h2><p><strong>惯例，先看最终执行效果图</strong></p><p><a href="/uploads/posts/2017/08/Screenshot_2017-08-21-09-57-03-169_com.termux.png"><img src="/uploads/posts/2017/08/Screenshot_2017-08-21-09-57-03-169_com.termux.png" alt="termux-screenshot"></a></p><h2>android客户端软件清单</h2><p><a href="/uploads/posts/2017/08/IMG_20170821_100922.jpg"><img src="/uploads/posts/2017/08/IMG_20170821_100922.jpg" alt="android-app-list"></a></p><ul><li><a href="https://termux.com/" target="_blank" rel="external">Termux</a></li></ul><p>无需root的终端app，基于busybox</p><ul><li>(可选) <a href="https://play.google.com/store/apps/details?id=org.pocketworkstation.pckeyboard" target="_blank" rel="external">Hacker's Keyboard</a></li></ul><p>更舒服的编码键盘</p><ul><li>(可选) <a href="https://play.google.com/store/apps/details?id=com.appaholics.keyboardswitch" target="_blank" rel="external">Quick Keyboard Switch</a></li></ul><p>快速切换键盘（通知栏输入法切换）</p><ul><li>(可选) <a href="https://play.google.com/store/apps/details?id=de.onyxbits.remotekeyboard" target="_blank" rel="external">Remote Keyboard</a></li></ul><p>非常简单的远程键盘输入，你所需要的只是一个telnet终端工具（windows的telnet命令或者SecureCRT,XShell之类的都可以） 打开Remote Keyboard后会告诉你本机的服务地址和端口 同时你选中的输入法是Remote Keyboard 在你的终端工具/指令中连接上此ip端口即可</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">telnet 192.168.1.247 2323</div></pre></td></tr></table></figure><p></p><p>然后就尽情的输入吧，不过话说，有台式机还要在手机玩，应该是缺乏安全感吧。</p><p><a href="/uploads/posts/2017/08/QQ20170821-100001@2x.png"><img src="/uploads/posts/2017/08/QQ20170821-100001@2x.png" alt="remote_keyboard-telnet-screenshot"></a></p><ul><li>(备用) <a href="https://play.google.com/store/apps/details?id=com.spartacusrex.spartacuside" target="_blank" rel="external">Terminal IDE</a></li></ul><p>这货也是基于busybox的，不过属于一次性集成n多包的那种，目前没看到追加包的办法只有rpm指令，如果内置的功能够用，这个备选也不错。</p><ul><li>(推荐) <a href="https://play.google.com/store/apps/details?id=com.sonelli.juicessh" target="_blank" rel="external">JuiceSSH - SSH Client</a></li></ul><p>如果你仅仅是需要远程登录到服务器临时解决一下问题的话这个ssh终端工具也许会更适合你。</p><h2>准备</h2><p><strong>如果你愿意认真读Termux的帮助文档，这里的很多废话可以略过，想省时间的话看下面：</strong></p><h2>触屏键盘</h2><ul><li>触屏键盘手机的实体键位中的音量减相当于linux中的Control键(CTRL)</li><li>触屏键盘手机的实体键位中的音量加相当于linux中的Alt键(ALT)或一些特殊功能键</li><li>触屏键盘记得按音量加 + Q键 开启扩展功能键视图会比较方便输入</li></ul><h2>安装包管理器</h2><p>debian/ubuntu的包管理器的那一套的简装版</p><ul><li><p>安装包</p><figure class="highlight plain"><figcaption><span>install xxx```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* 搜索包 ```apt search xxx</div></pre></td></tr></table></figure><p></p></li><li><p>卸载包</p><figure class="highlight plain"><figcaption><span>remove xxx```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* 列出已安装包 ```apt list --installed</div></pre></td></tr></table></figure><p></p></li></ul><p>所有的apt命令也可以用pkg命令替代 比如pkg install 等价于apt install</p><p>我本地配置基本环境所用到的包清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">aria2</div><div class="line">coreutils</div><div class="line">curl</div><div class="line">git</div><div class="line">golang</div><div class="line">gzip</div><div class="line">less</div><div class="line">lftp</div><div class="line">nano</div><div class="line">openssh</div><div class="line">screenfetch</div><div class="line">vim</div><div class="line">wget</div><div class="line">zsh</div><div class="line">termux-tools</div></pre></td></tr></table></figure><p></p><h2>挂载点配置</h2><p>运行指令：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">termux-setup-storage</div></pre></td></tr></table></figure><p></p><p>具体的挂载点可以参考 https://termux.com/storage.html 在这里就不展开说了</p><h2>交互终端配置</h2><p>你可以安装zsh来提供更便捷的使用体验</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt install zsh</div></pre></td></tr></table></figure><p></p><p>切换zsh为默认shell:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh -s zsh</div></pre></td></tr></table></figure><p></p><p><strong>注意你的配置里locale的设置应该会无效，至少我目前是把服务端的.profile修改后再使用的</strong></p><p>默认的zsh啥也木有，而网上的oh-my-zsh又没办法直接安装在termux里 有人已经做好了移植版：</p><p>https://github.com/Cabbagec/termux-ohmyzsh</p><p>安装指令：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">sh -c &quot;$(curl -fsSL https://github.com/Cabbagec/termux-ohmyzsh/raw/master/install.sh)&quot;</div></pre></td></tr></table></figure><p></p><p>记得先apt install 我上面包列表中的curl至少。</p><p>最后可以根据自己的个人喜好修改一下~/.zshrc配置中的主题</p><p>个人比较喜好ys主题，诸君请随意。</p><h2>手机ssh服务</h2><p>除了Remote Keyboard这种歪脖看手机屏幕，电脑键盘打字的方式，更传统的方式是把手机当服务器ssh连进来玩。</p><p>apt install openssh 之后即可，不过有几点注意的地方：</p><ul><li><p>sshd需要手工跑一下</p></li><li><p>有1024低端口安全限制所以这里sshd的服务是开在8022端口上的</p></li><li><p>因为Termux是不需要root的系统，所以一般情况下你登录的用户名需要你自己看一下：</p></li></ul><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">whoami</div></pre></td></tr></table></figure><p></p><ul><li>ssh登录是key公钥模式登录，你可以先手工scp远程的公钥到本地的路径再cat追加到~/.ssh/authorized_keys中然后在客户机以密钥对的私钥登录</li></ul><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -p8022 xxx@192.168.1.247</div></pre></td></tr></table></figure><p></p><p>其中xxx是你whoami中查到的值</p><ul><li>如果你要从手机上ssh到其他服务器</li></ul><p>最简单的办法，copy私钥到~/.ssh/id_rsa位置然后在zsh里开启ssh-agent插件:</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugin=(git ssh-agent)</div></pre></td></tr></table></figure><p></p><p>或者你也可以试试在自己的.profile或者其他交互启动脚本中追加：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">if [ -f ~/.ssh/id_rsa ]; then</div><div class="line">    ssh-add -K ~/.ssh/id_rsa 2&gt;/dev/null</div><div class="line">fi</div></pre></td></tr></table></figure><p></p><h2>杂谈</h2><p>这货虽然是busybox组装的但是基础组件都能慢慢堆叠，</p><p>虽然环境简陋了点，但好歹真正的应急移动办公也算有点着落</p><p>另外私钥还是要保管好的说。</p><p>除此之外，有aria2可以用来当下载服务用，路径记得设在外面的挂载点里，配合android端的ui，你懂的。</p><p>golang装好了之后还能起个本地web服务玩玩，总之爱折(zhuang)腾(bi)的朋友不容错过。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;效果图&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;惯例，先看最终执行效果图&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;/uploads/posts/2017/08/Screenshot_2017-08-21-09-57-03-169_com.termux.png&quot;&gt;&lt;img s
    
    </summary>
    
      <category term="dev" scheme="https://nickfan.github.io/categories/dev/"/>
    
      <category term="env" scheme="https://nickfan.github.io/categories/dev/env/"/>
    
    
      <category term="mobile-dev" scheme="https://nickfan.github.io/tags/mobile-dev/"/>
    
      <category term="android" scheme="https://nickfan.github.io/tags/android/"/>
    
      <category term="termux" scheme="https://nickfan.github.io/tags/termux/"/>
    
      <category term="linux" scheme="https://nickfan.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>github上hexo静态博客自动部署配置笔记</title>
    <link href="https://nickfan.github.io/2017/07/25/github-blog-setup/"/>
    <id>https://nickfan.github.io/2017/07/25/github-blog-setup/</id>
    <published>2017-07-25T12:33:00.000Z</published>
    <updated>2018-12-25T08:22:59.822Z</updated>
    
    <content type="html"><![CDATA[<h2>前言</h2><p>越来越觉得时间不够用，千头万绪，容我喝口水。。</p><p>写blog的频率还赶不上wordpress的安全更新的推送频率，思考了一下还是决定把博客迁移到github上来，动机：</p><ol><li>wordpress的强大对于我等懒人实在是太折腾了。</li><li>https+全静态，后续维护不想再折腾太多。</li><li>不怕忘了续费，哪怕百年之后也算留点痕迹。(但愿github在10年之内能继续服务下去，至少感觉比国内的服务靠谱一点，关站的几率较小)</li></ol><h2>方案</h2><p>目前来说看了一眼 https://www.staticgen.com/</p><p>jekyll最火，ruby的，环境配置方面感觉有点担心 hugo其次, golang的，虽然最快，最强大，但从写博客的角度出发而言，用静态建站工具来搞，略有点繁杂，而且貌似教程不多。 hexo再次，node的，教程挺多，还有比较成熟的主题，就他了。</p><ul><li>建站工具: hexo + NexT 主题模板</li><li>github公共主页静态页面网站</li><li>bitbucket后端项目源码</li><li>codeship持续集成自动发布</li></ul><h2>预备</h2><ol><li>git本地配置+ssh公钥配置</li><li>github账号</li><li>bitbucket账号</li><li>codeship账号</li></ol><h2>安装</h2><ul><li>安装hexo</li></ul><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure><p></p><ul><li>生成并初始化博客</li></ul><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init myblog</div></pre></td></tr></table></figure><p></p><ul><li>安装NexT主题 (下载最新版本的主题并mv到myblog/themes/next路径)</li></ul><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd myblog</div><div class="line">wget https://github.com/iissnan/hexo-theme-next/archive/v5.1.1.tar.gz</div><div class="line">tar zxf v5.1.1.tar.gz</div><div class="line">mv hexo-theme-next-5.1.1 themes/next</div><div class="line">rm -rf v5.1.1.tar.gz</div></pre></td></tr></table></figure><p></p><p><strong>参考链接:</strong></p><ul><li><p><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="external">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></p></li><li><p><a href="https://xuanwo.org/2015/03/26/hexo-intor/" target="_blank" rel="external">史上最详细的Hexo博客搭建图文教程</a></p></li><li><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT主题配置流程</a></p></li><li><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo 官方中文文档</a></p></li><li><p>按参考链接中的说明配置好你的站点 _config.yml 配置文件和主题配置文件 themes/next/_config.yml</p></li></ul><h2>使用</h2><h3>基本页面</h3><ul><li>关于 页面</li></ul><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page about</div></pre></td></tr></table></figure><p></p><p>内容自己填写</p><ul><li>tags 页面</li></ul><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page tags</div></pre></td></tr></table></figure><p></p><p>内容：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: tags</div><div class="line">date: 2017-07-25 15:06:12</div><div class="line">type: &quot;tags&quot;</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure><p></p><ul><li>categories 页面</li></ul><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page categories</div></pre></td></tr></table></figure><p></p><p>内容：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: categories</div><div class="line">date: 2017-07-25 16:21:02</div><div class="line">type: &quot;categories&quot;</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure><p></p><h3>新建文章</h3><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;hello world&quot;</div></pre></td></tr></table></figure><p></p><p>文章源文件存储在source/_posts/</p><p>不用的文章删掉文件重新发布即可。</p><h3>本地测试</h3><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s -g</div></pre></td></tr></table></figure><p></p><p>访问 http://localhost:4000 预览效果。</p><h3>清理</h3><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo clean</div></pre></td></tr></table></figure><p></p><h3>手工发布</h3><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure><p></p><h2>自动发布配置</h2><ul><li>在bitbucket上新建私有项目（部分配置key需要保密）</li><li>在codeship中导入此私有项目</li><li>在codeship中查看deploy-keys发布公钥，并在github的对应静态站点中配置此发布公钥并允许write写入权限</li><li>配置codeship基础setup初始化指令：</li></ul><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">nvm install 6.11.1</div><div class="line">npm install hexo-cli -g</div><div class="line">npm install</div><div class="line"># or, if you prefer to use yarn</div><div class="line">#yarn install</div><div class="line"></div><div class="line">git config --global user.email &quot;yourname@example.com&quot;</div><div class="line">git config --global user.name &quot;yourname&quot;</div></pre></td></tr></table></figure><p></p><p>注意记得指令中配置git的全局配置，不然部署流程可能失败</p><ul><li>删掉test的commands的pipeline 指令，不需要</li><li>配置deploy部署指令的分支为master</li><li>配置部署指令的脚本为custom scripts:</li></ul><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo d -g</div></pre></td></tr></table></figure><p></p><p><strong>注意：如果你使用了algolia的三方服务组件的情况下：</strong> 你的codeship配置中环境变量要加上HEXO_ALGOLIA_INDEXING_KEY的变量 并且在algolia 新建对应的索引用的apikey，设置流程参考：<a href="https://github.com/oncletom/hexo-algolia#api-key" target="_blank" rel="external">hexo-algolia</a></p><p>部署脚本的指令也要改为：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g</div><div class="line">hexo algolia</div><div class="line">hexo d</div></pre></td></tr></table></figure><p></p><ul><li>写点内容到你的博客中，并提交push到bitbucket的项目中去(source/_posts/中新建xxx.md的日志文件)</li></ul><p>等着发布完成的通知</p><p>查看你的静态博客站点看效果吧。</p><p>当前这篇文章就是在bitbucket的在线创建文件编辑器(支持markdown)中编写的。</p><h2>TODO</h2><p>在线图床可以用imgur或者七牛的服务，如果写文字为主也可以本地存图，</p><p>完整的想好好的像medium、简书之类的服务在线码字贴图的话，</p><p>一种方案就是写个前后端编辑器处理上传文件服务和提交/获取bitbucket项目文件。 再牛一点就是纯h5方案前端集成图床的api接口+bitbucket的服务接口。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;前言&lt;/h2&gt;&lt;p&gt;越来越觉得时间不够用，千头万绪，容我喝口水。。&lt;/p&gt;&lt;p&gt;写blog的频率还赶不上wordpress的安全更新的推送频率，思考了一下还是决定把博客迁移到github上来，动机：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;wordpress的强大对于我等懒人实在是太折腾了
    
    </summary>
    
      <category term="dev" scheme="https://nickfan.github.io/categories/dev/"/>
    
      <category term="deployment" scheme="https://nickfan.github.io/categories/dev/deployment/"/>
    
    
      <category term="github" scheme="https://nickfan.github.io/tags/github/"/>
    
      <category term="static-site" scheme="https://nickfan.github.io/tags/static-site/"/>
    
      <category term="hexo" scheme="https://nickfan.github.io/tags/hexo/"/>
    
      <category term="deployment" scheme="https://nickfan.github.io/tags/deployment/"/>
    
      <category term="ci" scheme="https://nickfan.github.io/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>windows下基础开发环境搭建</title>
    <link href="https://nickfan.github.io/2016/05/28/windows-dev-env-setup/"/>
    <id>https://nickfan.github.io/2016/05/28/windows-dev-env-setup/</id>
    <published>2016-05-28T01:22:12.000Z</published>
    <updated>2018-12-25T08:22:59.822Z</updated>
    
    <content type="html"><![CDATA[<p><strong>工作需要在windows环境下搭建一个基础开发环境，在此记录一下：</strong></p><h2>一、注意事项</h2><ol><li>以下的安装配置方法仅支持win7/8/10之类的系统，xp可以洗洗睡了。</li><li>装了cmder-full(With git-for-windows)版或者babun就没有必要安装git-for-windows了，不过从兼容性角度出发，建议还是使用cmder-full的版本，至少纯windows的环境下也能直接使用git指令，也支持外部ide调用。</li><li>babun（cygwin）是调整过的cygwin环境,cmder默认是windows环境(可以安装chocolatey做包管理)两个环境面对的场景不同，choco安装的软件基本都是port到win环境下的版本，和babun的cygwin环境下的版本配置方式不一样，看各人喜好，可以分别使用，也可以只使用一个。</li><li>linux的家HOME目录用~字符来标识，windows下通常对应的就是C:\Users\Administrator目录</li></ol><h2>二、终端环境</h2><p><strong>推荐使用cmder(With git-for-windows) + babun(cygwin)预配置环境的方式，既有普通cmd终端的linux化，又支持cygwin环境安装使用你所需要的linux环境安装包</strong></p><ol><li><a href="http://cmder.net/" target="_blank" rel="external">cmder-full（With git-for-windows）</a>下载后解压缩到磁盘，（推荐c:\opt\cmder）</li><li>加入系统环境变量PATH环境变量中追加c:\opt\cmder路径。</li><li>注册右键菜单：以管理员身份启动命令行提示符(cmd)，然后进入c:\opt\cmder路径后执行：</li></ol><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cmder.exe /REGISTER ALL</div></pre></td></tr></table></figure><p></p><ol start="4"><li>提示符配置：修改cmder目录下的config\cmder.lua的第2行把λ替换为$,更符合日常linux下用户prompt的习惯。</li></ol><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function lambda_prompt_filter()</div><div class="line">    clink.prompt.value = string.gsub(clink.prompt.value, &quot;&#123;lamb&#125;&quot;, &quot;$&quot;)</div><div class="line">end</div></pre></td></tr></table></figure><p></p><ol start="5"><li>常用别名配置：修改cmder目录下的config\alias文件，在最后加入常用的alias，比如：</li></ol><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">l=ls --show-control-chars</div><div class="line">la=ls -aF --show-control-chars </div><div class="line">ll=ls -alF --show-control-chars</div></pre></td></tr></table></figure><p></p><ol start="6"><li><p>中文字间距问题，启动cmder后win+alt+p呼出设置面板去掉 monospace 选项（点两下让勾选框留空），然后save settings保存设置。</p></li><li><p>可选（安装chocolatey windows包管理器），打开cmder/cmd终端，执行以下命令：</p></li></ol><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@powershell -NoProfile -ExecutionPolicy Bypass -Command &quot;iex ((new-object net.webclient).DownloadString(&apos;https://chocolatey.org/install.ps1&apos;))&quot; &amp;amp;&amp;amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin</div></pre></td></tr></table></figure><p></p><ol start="8"><li>安装babun的环境：下载<a href="http://babun.github.io/" target="_blank" rel="external">babun</a>官网上的安装包，解压后执行其中的install.bat批处理文件</li><li>配置整合babun环境到cmder工具中：启动cmder后win+alt+p呼出设置面板(Settings)，然后打开 Startup&gt;Tasks面板点+号添加一个task，名称输入babun， Task parameters中输入：</li></ol><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/icon &quot;%userprofile%\.babun\cygwin\bin\mintty.exe&quot; /dir &quot;%userprofile%&quot;</div></pre></td></tr></table></figure><p></p><p>下面的Commands大输入文本框中输入：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%userprofile%\.babun\cygwin\bin\mintty.exe /bin/env CHERE_INVOKING=1 /bin/zsh.exe</div></pre></td></tr></table></figure><p></p><p>save settings保存设置，然后你可以按up或down的按钮把{babun}的顺序调到{cmd}的前后，也可以勾选Default task for new console和Default Shell选项来把它作为默认console。注意，如果新开窗口想默认用{babun}，需要修改Startup面板中的Specified named task不选{cmd}而是新的这个{babun}</p><ol start="10"><li>修改babun的环境配置：cmder启动后打开{babun}的终端后编辑~/.zshrc文件：</li></ol><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~/.zshrc</div></pre></td></tr></table></figure><p></p><p>修改ZSH_THEME=&quot;babun&quot;为ZSH_THEME=&quot;ys&quot;，后保存退出，然后关闭终端后再启动{babun}终端即可。</p><ol start="11"><li>如果你还是习惯mingw的git-bash环境也可以在cmder工具中添加配置：启动cmder后win+alt+p呼出设置面板(Settings)，然后打开 Startup&gt;Tasks面板点+号添加一个task，名称输入gitbash，Task parameters中留空下面的Commands大输入文本框中输入：</li></ol><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%ConEmuDir%\..\git-for-windows\git-cmd.exe --cd-to-home --command=usr/bin/bash.exe -l -i</div></pre></td></tr></table></figure><p></p><p>save settings保存设置即可，后续的就可以启动{gitbash}终端使用了。</p><p>至此你已经完成了windows下终端环境的配置，启动cmder后，<strong>{cmd}的task为windows上下文命令行：使用choco作为包管理器</strong> 同时也支持一些基本的linux命令比如ls,curl之类的，软件包管理可以使用chocolatey的choco指令，</p><p></p><figure class="highlight plain"><figcaption><span>search notepad</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">choco install -y notepadplusplus</div></pre></td></tr></table></figure><p></p><p><strong>{babun}的task为cygwin上下文命令行：使用pact作为包管理器</strong></p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pact find php</div><div class="line">pact install -y php</div></pre></td></tr></table></figure><p></p><p>注意{babun}的cygwin环境上下文中的安装的包不能在windows上下文环境中使用，（比如这里安装的php指令在windows环境下则会报招不到php指令），但windows上下文环境中安装的软件可以在cygwin环境下最后被搜索到则<strong>调用</strong>，注意是调用，效率比较低，而且也无法控制执行，所以通常情况下的windows指令还是推荐在{cmd}终端中执行。</p><ol start="12"><li>命令行生成私钥公钥对：</li></ol><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;you@myteam&quot;</div></pre></td></tr></table></figure><p></p><p>默认生成的文件在~/.ssh路径下的id_rsa(私钥)和id_rsa.pub(公钥)，id_rsa.pub可以添加到代码托管环境的个人公钥列表中去</p><ol start="13"><li>设置个人基础的git信息:</li></ol><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;你的名字或昵称&quot;</div><div class="line">git config --global user.email &quot;你的邮箱&quot;</div></pre></td></tr></table></figure><p></p><h2>三、开发环境(virtualbox+ vagrant[homestead]|docker[laradock])</h2><ol><li>安装 <a href="http://virtualbox.org/" target="_blank" rel="external">virtualbox</a>和其<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">下载页面</a>的Oracle VM VirtualBox Extension Pack扩展包</li><li>安装<a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="external">vagrant</a>工具</li><li>以vagrant（homestead）为例子构建开发环境: {cmd}命令行输入:</li></ol><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vagrant box add laravel/homestead</div></pre></td></tr></table></figure><p></p><p>下载比较慢，你可以在这里： https://atlas.hashicorp.com/laravel/boxes/homestead 查到版本号，然后手工下载官方的链接，比如0.4.4的版本： https://atlas.hashicorp.com/laravel/boxes/homestead/versions/0.4.4/providers/virtualbox.box 注意部分下载工具比如迅雷可能会导致下载的box文件损坏从而无法导入。 下载好后，放到可以被当前用户命令行访问到的地方然后执行：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vagrant box add laravel/homestead /Path/to/Homestead.box</div></pre></td></tr></table></figure><p></p><p>/Path/to/Homestead.box就是你下载的box文件的完整访问路径。 导入成功后此时的box是没有版本信息的，你需要手工修正这个版本的问题：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/.vagrant.d/boxes/laravel-VAGRANTSLASH-homestead</div><div class="line">    mv 0 0.4.4</div></pre></td></tr></table></figure><p></p><p>将0目录改名成0.4.4名称 然而此时的手工添加的方式没有升级信息需要手工添加metadata_url这个文件到系统下：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/.vagrant.d/boxes/laravel-VAGRANTSLASH-homestead</div><div class="line">    vim metadata_url</div></pre></td></tr></table></figure><p></p><p>内容输入：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://atlas.hashicorp.com/laravel/homestead</div></pre></td></tr></table></figure><p></p><p>注意如果是手工编辑的此文件，不要有任何形式的回车换行符和空格等无效内容，保存后退出vim 接下来就可以开始homestead的基础安装了，返回到$HOME路径：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~</div><div class="line">    git clone https://github.com/laravel/homestead.git ~/Homestead</div></pre></td></tr></table></figure><p></p><p>你也可以使用我定制过的版本 【首次provision的时候，你网络没问题的话，自动帮你搞定以下问题】</p><blockquote><blockquote><p>国内apt源</p><pre><code>    oh-my-zsh安装配置

    略调整过的vim环境配置

    composer环境加 中文源

    laravel-envoy部署工具、laravel命令行工具、box(phar打包工具)

    psysh 交互式php命令行工具

    cnpm 国内源npm

    phpunit命令行工具

    命令行代理服务、工具privoxy proxychains

    命令行科学上网工具，shadowsocks(sslocal/ssserver)+配置更新脚本 （懂得同学最好还是换成自己的配置/home/vagrant/etc/shadowsocks.json，并注释掉/etc/cron.d/ssupdateinfo中的对配置更新脚本的调用/home/vagrant/bin/upssinfo.sh）

    喜欢折腾的童鞋可以fork我的改版后自己修改 scripts/pre-setup.sh和scripts/post-setup.sh脚本。
</code></pre></blockquote></blockquote><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~</div><div class="line">    git clone https://github.com/nickfan/homestead.git ~/Homestead</div></pre></td></tr></table></figure><p></p><p>然后进入~/Homestead后执行：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/Homestead/</div><div class="line">    bash init.sh</div></pre></td></tr></table></figure><p></p><p>这个步骤会自动生成 ~/.homestead/Homestead.yaml的虚拟机配置文件，根据你自己的需要做对应的定制，比如我的：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">    ip: &quot;192.168.70.10&quot;</div><div class="line">    memory: 2048</div><div class="line">    cpus: 1</div><div class="line">    provider: virtualbox</div><div class="line"></div><div class="line">    authorize: ~/.ssh/id_rsa.pub</div><div class="line"></div><div class="line">    keys:</div><div class="line">        - ~/.ssh/id_rsa</div><div class="line"></div><div class="line">    folders:</div><div class="line">        - map: ~/Code</div><div class="line">          to: /home/vagrant/Code</div><div class="line"></div><div class="line">    sites:</div><div class="line">        - map: homestead.app</div><div class="line">          to: /home/vagrant/Code/homesteadapp/public</div><div class="line"></div><div class="line">    databases:</div><div class="line">        - homestead</div><div class="line"></div><div class="line">    # blackfire:</div><div class="line">    #     - id: foo</div><div class="line">    #       token: bar</div><div class="line">    #       client-id: foo</div><div class="line">    #       client-token: bar</div><div class="line"></div><div class="line">    # ports:</div><div class="line">    #     - send: 50000</div><div class="line">    #       to: 5000</div><div class="line">    #     - send: 7777</div><div class="line">    #       to: 777</div><div class="line">    #       protocol: udp</div></pre></td></tr></table></figure><p></p><p>注意的一点是~/Code也就是C:\Users\Administrator\Code目录不能是软链的目录而必须是实体目录，否则在virtualbox挂载的时候会报错。 然后回到~/Homestead执行：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/Homestead</div><div class="line">    vagrant up</div></pre></td></tr></table></figure><p></p><p>执行首次启动的provision流程。 后续的执行只需要vagrant up即可。vagrant halt关闭虚拟机。 如果provision的过程中网络出现问题等其他虚拟机被弄乱的情况还可以 vagrant destroy --force来强行删除掉虚拟机，再vagrant up来重新provision一遍。 其他homestead的安装细节可以参考：http://laravel-china.org/docs/5.1/homestead</p><ol><li>如果你比较熟悉docker也可以安装新的<a href="https://www.docker.com/products/docker-toolbox" target="_blank" rel="external">docker-tools</a>集成docker工具集 安装的时候，前面你已经独立安装过了virtualbox和cmder(git-for-windows)所以此处安装时，请不用勾选 VirtualBox和Git for Windows两个选项 <img src="http://blog.axiong.me/wp-content/uploads/2016/05/docker-setup.png" alt="docker-setup"> 安装路径，推荐改为C:\opt\docker-toolbox 方便后续命令行操作时的输入。&lt;/p&gt;</li><li>集成docker的启动命令： 在cmder工具中添加配置：启动cmder后win+alt+p呼出设置面板(Settings)，然后打开 Startup&gt;Tasks面板点+号添加一个task，名称输入docker， Task parameters中输入：</li></ol><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/dir &quot;C:\opt\docker-toolbox&quot; /icon &quot;C:\opt\docker-toolbox\boot2docker.ico&quot;</div></pre></td></tr></table></figure><p></p><p>下面的Commands大输入文本框中输入：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;-new_console:C:C:\opt\docker-toolbox\boot2docker.ico&quot; -new_console:n -new_console:t:Boot2Docker &quot;-new_console:d:C:\opt\docker-toolbox&quot; &quot;%ConEmuDir%\..\git-for-windows\bin\sh.exe&quot; --login -i &quot;C:\opt\docker-toolbox\start.sh&quot;</div></pre></td></tr></table></figure><p></p><p>save settings保存设置即可，后续的就可以启动{docker}终端使用了。 另外如果docker-toolbox安装时是独立安装的git-for-windows（像我们前面描述的这样）需要手工修改桌面和开始菜单中的快捷方式Docker Quickstart Terminal，把目标程序的命令行内容改为：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\opt\cmder\vendor\git-for-windows\bin\bash.exe --login -i &quot;C:\opt\docker-toolbox\start.sh&quot;</div></pre></td></tr></table></figure><p></p><ol><li>以docker(laradock)为例子构建开发环境 你可以clone官方的版本：</li></ol><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/Code</div><div class="line">    git clone https://github.com/LaraDock/laradock.git</div></pre></td></tr></table></figure><p></p><p>然后修改docker-compose.yml配置文件中的application的volumes设置：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">### Laravel Application Code Container ######################</div><div class="line"></div><div class="line">        application:</div><div class="line">            build: ./application</div><div class="line">            volumes:</div><div class="line">                - ../:/var/www/laravel</div></pre></td></tr></table></figure><p></p><p>改为：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">### Laravel Application Code Container ######################</div><div class="line"></div><div class="line">        application:</div><div class="line">            build: ./application</div><div class="line">            volumes:</div><div class="line">                - ../dockerapp/:/var/www/laravel</div></pre></td></tr></table></figure><p></p><p>也可以直接clone我改好的版本</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/Code</div><div class="line">    git clone https://github.com/nickfan/laradock.git</div></pre></td></tr></table></figure><p></p><p>然后可以把Code下 前面构建好的homesteadapp做个软链到dockerapp，这样可以只用一套代码</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd ~/Code</div><div class="line">    ln -nfs homesteadapp dockerapp</div><div class="line">    #或者windows上下文的</div><div class="line">    mklink /d dockerapp homesteadapp</div></pre></td></tr></table></figure><p></p><p>最后初始化docker环境：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-compose up  nginx mysql redis</div></pre></td></tr></table></figure><p></p><p>剩下的调整配置、和使用部分可以参考官方文档：https://github.com/LaraDock/laradock</p><h2>其他推荐软件</h2><p>以下软件都可以用 <a href="https://chocolatey.org/" target="_blank" rel="external">chocolatey</a> windows下的命令行包管理器 来安装，安装/卸载软件并不需要用到那些什么软件管理专家了。</p><ol><li><a href="http://www.getwox.com/" target="_blank" rel="external">wox</a> windows下类似于mac的alfred的快速启动工具，有了它记得软件、目录名字就可以了，忘了开始菜单吧。</li><li><a href="https://www.voidtools.com/" target="_blank" rel="external">everything</a> windows下的文件搜索工具，这个就不用多说了吧。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;工作需要在windows环境下搭建一个基础开发环境，在此记录一下：&lt;/strong&gt;&lt;/p&gt;&lt;h2&gt;一、注意事项&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;以下的安装配置方法仅支持win7/8/10之类的系统，xp可以洗洗睡了。&lt;/li&gt;&lt;li&gt;装了cmder-full(Wi
    
    </summary>
    
      <category term="dev" scheme="https://nickfan.github.io/categories/dev/"/>
    
    
      <category term="babun" scheme="https://nickfan.github.io/tags/babun/"/>
    
      <category term="cmder" scheme="https://nickfan.github.io/tags/cmder/"/>
    
      <category term="cygwin" scheme="https://nickfan.github.io/tags/cygwin/"/>
    
  </entry>
  
  <entry>
    <title>基于Laravel Envoy的部署脚本</title>
    <link href="https://nickfan.github.io/2015/07/21/envoy-deployscript/"/>
    <id>https://nickfan.github.io/2015/07/21/envoy-deployscript/</id>
    <published>2015-07-21T08:04:06.000Z</published>
    <updated>2018-12-25T08:22:59.822Z</updated>
    
    <content type="html"><![CDATA[<p>如题，找了半天貌似都没有符合laravel的天朝网络环境的的部署脚本， 于是乎结合参考了多个部署脚本和工具的理念又造了个新轮子：</p><p><a href="https://github.com/nickfan/envoy-deployscript" target="_blank" rel="external">https://github.com/nickfan/envoy-deployscript</a></p><p>使用说明见：<a href="https://github.com/nickfan/envoy-deployscript/blob/master/README.zh-CN.md" target="_blank" rel="external">https://github.com/nickfan/envoy-deployscript/blob/master/README.zh-CN.md</a></p><p>欢迎大家测试吐槽。</p><p>主要特点：</p><p>支持本地构建打包部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">envoy run deploy_localrepo_install --branch=master --env=production</div></pre></td></tr></table></figure><p></p><p>支持工作拷贝本地构建依赖模块(vendor目录)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">envoy run deploy_mix_pack</div></pre></td></tr></table></figure><p></p><h2>原理/设计规划</h2><p>你的 <code>$deploybasepath</code> 远程部署基础路径将会看起来像如下这样(如果你有多个子应用在同一个部署基路径里).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysite/</div><div class="line">mysite2/</div><div class="line">mysite3/</div></pre></td></tr></table></figure><p></p><p>你的 <code>$deploybasepath/$appname</code> 远程部署应用路径将会看起来如下.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">releases/release_20150717032737/</div><div class="line">releases/release_20150717034646/</div><div class="line">current -&gt; ./releases/release_20150717034646</div><div class="line">shared/storage/</div><div class="line">tmp/</div><div class="line">.env</div></pre></td></tr></table></figure><p></p><p>正如你所见的, <em>current</em> 目录是软链到最近一次的部署目录的</p><p>在你的部署目录中文件列表看起来像下面这样(只列举了部分文件做例子):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">app/</div><div class="line">artisan</div><div class="line">boostrap/</div><div class="line">public/index.php</div><div class="line">composer.json</div><div class="line">.env -&gt; ../../.env</div><div class="line">storage -&gt; ../../shared/storage</div><div class="line">vendor/</div></pre></td></tr></table></figure><p></p><p>部署目录中的.env文件和storage文件夹都软链接到了上级应用目录中的公共文件/文件夹了,这样部署本身只部署源代码和vendor等依赖环境, storage等公共数据在shared文件夹中并不随代码部署,节省了空间也保留延续了日志/应用cache等相关基础数据在应用中的使用</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题，找了半天貌似都没有符合laravel的天朝网络环境的的部署脚本， 于是乎结合参考了多个部署脚本和工具的理念又造了个新轮子：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/nickfan/envoy-deployscript&quot; target=&quot;_b
    
    </summary>
    
      <category term="dev" scheme="https://nickfan.github.io/categories/dev/"/>
    
      <category term="laravel" scheme="https://nickfan.github.io/categories/dev/laravel/"/>
    
    
      <category term="deploy" scheme="https://nickfan.github.io/tags/deploy/"/>
    
      <category term="envoy" scheme="https://nickfan.github.io/tags/envoy/"/>
    
      <category term="laravel" scheme="https://nickfan.github.io/tags/laravel/"/>
    
      <category term="php" scheme="https://nickfan.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的php守护进程代码示例</title>
    <link href="https://nickfan.github.io/2015/07/08/simple-php-daemon-code/"/>
    <id>https://nickfan.github.io/2015/07/08/simple-php-daemon-code/</id>
    <published>2015-07-08T04:50:29.000Z</published>
    <updated>2018-12-25T08:22:59.822Z</updated>
    
    <content type="html"><![CDATA[<p>工作中同事需要做一个简单的工作进程，需要在进程结束时不能被硬生生的掐断当前正在执行的工作流程，需要等一个处理流程跑完了再结束，所以这时候就需要用到pcntl的信号量来工作了，主要的设计思路：</p><ol><li>捕获系统发给进程的中断的信号量</li><li>在handler代码中设置标志位变量</li><li>在一个业务循环处理完成之后判断标志位变量，如果接收到过终止请求，则跳出整个工作循环。 主要的处理逻辑：</li></ol><ul><li><p>注册绑定函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">protected function regist_sig_handler()</div><div class="line">&#123;</div><div class="line">    declare(ticks = 1);</div><div class="line">    pcntl_signal(SIGTERM, [$this, &apos;sig_handler&apos;]);</div><div class="line">    pcntl_signal(SIGHUP, [$this, &apos;sig_handler&apos;]);</div><div class="line">    pcntl_signal(SIGINT, [$this, &apos;sig_handler&apos;]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p></li><li><p>在函数中设置标志位：</p></li></ul><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">protected function sig_handler($signo)</div><div class="line">    &#123;</div><div class="line">        switch ($signo) &#123;</div><div class="line">            case SIGTERM:</div><div class="line">            case SIGHUP:</div><div class="line">            case SIGINT:</div><div class="line">                self::$_MYDAEMON_SHOULD_STOP = true;</div><div class="line">                // ...</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p></p><ul><li><p>构建退出处理函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">protected function shouldStop()</div><div class="line">   &#123;</div><div class="line">       if (self::$_MYDAEMON_SHOULD_STOP) &#123;</div><div class="line">           // before exit staff code</div><div class="line">           // ...</div><div class="line">           return true;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       return false;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p></p></li><li><p>在主循环中一次处理完成后判断是否要终止退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">while (true) &#123;</div><div class="line">    if ($this-&gt;shouldStop()) &#123;</div><div class="line">        break;</div><div class="line">    &#125;</div><div class="line">    try &#123;</div><div class="line">        $jobStatusInfo = $this-&gt;execute([]);</div><div class="line">    &#125; catch (Exception $ex) &#123;</div><div class="line">        $this-&gt;log($ex-&gt;getMessage());</div><div class="line">    &#125;</div><div class="line">    usleep(10);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p></li></ul><p>附上完整代码（loop是示例需要长时间处理的业务逻辑，memoryusage超限也会退出，外部可以由supervisor/daemontools等进程监控程序控制）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env php</div><div class="line">&amp;lt;?php</div><div class="line">/**</div><div class="line"> * Description</div><div class="line"> *</div><div class="line"> * @project mydevkit</div><div class="line"> * @package mydevkit</div><div class="line"> * @author nickfan &amp;lt;nickfan81@gmail.com&gt;</div><div class="line"> * @link http://www.axiong.me</div><div class="line"> * @version $Id$</div><div class="line"> * @lastmodified: 2015-07-08 09:37</div><div class="line"> *</div><div class="line"> */</div><div class="line">@set_time_limit(0);</div><div class="line"></div><div class="line">class myDaemon</div><div class="line">&#123;</div><div class="line">    const DEBUG = true;</div><div class="line">    protected static $_MYDAEMON_SHOULD_STOP = false;</div><div class="line">    public static $memLimit = 5242880;</div><div class="line">    private $loop = 10;</div><div class="line">    protected $logpath = &apos;&apos;;</div><div class="line"></div><div class="line">    public function __construct($option = [])</div><div class="line">    &#123;</div><div class="line">        $option += [</div><div class="line">            &apos;loop&apos; =&gt; 10,</div><div class="line">            &apos;memLimit&apos; =&gt; 5242880,</div><div class="line">            &apos;logpath&apos; =&gt; &apos;/tmp/daemon_kill.log&apos;,</div><div class="line">        ];</div><div class="line">        $this-&gt;loop = $option[&apos;loop&apos;];</div><div class="line">        $this-&gt;logpath = $option[&apos;logpath&apos;];</div><div class="line">        self::$memLimit = $option[&apos;memLimit&apos;];</div><div class="line">        $this-&gt;regist_sig_handler();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function __destruct()</div><div class="line">    &#123;</div><div class="line">        $this-&gt;log(&apos;worker progress ending...&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected function regist_sig_handler()</div><div class="line">    &#123;</div><div class="line">        declare(ticks = 1);</div><div class="line">        pcntl_signal(SIGTERM, [$this, &apos;sig_handler&apos;]);</div><div class="line">        pcntl_signal(SIGHUP, [$this, &apos;sig_handler&apos;]);</div><div class="line">        pcntl_signal(SIGINT, [$this, &apos;sig_handler&apos;]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected function sig_handler($signo)</div><div class="line">    &#123;</div><div class="line">        switch ($signo) &#123;</div><div class="line">            case SIGTERM:</div><div class="line">            case SIGHUP:</div><div class="line">            case SIGINT:</div><div class="line">                self::$_MYDAEMON_SHOULD_STOP = true;</div><div class="line">                $signoStr = &apos;&apos;;</div><div class="line">                if ($signo == SIGTERM) &#123;</div><div class="line">                    $signoStr = &apos;SIGTERM&apos;;</div><div class="line">                &#125; elseif ($signo == SIGHUP) &#123;</div><div class="line">                    $signoStr = &apos;SIGHUP&apos;;</div><div class="line">                &#125; elseif ($signo == SIGINT) &#123;</div><div class="line">                    $signoStr = &apos;SIGINT&apos;;</div><div class="line">                &#125;</div><div class="line">                $content = date(&apos;Y-m-d H:i:s&apos;) . &apos; &apos; . $signoStr . PHP_EOL;</div><div class="line">                file_put_contents($this-&gt;logpath, $content, FILE_APPEND);</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected function shouldStop()</div><div class="line">    &#123;</div><div class="line">        if (self::$_MYDAEMON_SHOULD_STOP) &#123;</div><div class="line">            // before exit staff code</div><div class="line">            // ...</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected function log()</div><div class="line">    &#123;</div><div class="line">        $args = func_get_args();</div><div class="line">        $retstr = date(&apos;[Y-m-d H:i:s] &apos;) . implode(&apos; &apos;, $args) . PHP_EOL;</div><div class="line">        if (self::DEBUG == true) &#123;</div><div class="line">            echo $retstr;</div><div class="line">        &#125; else &#123;</div><div class="line">            return $retstr;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function execute($data = [])</div><div class="line">    &#123;</div><div class="line">        $this-&gt;log(&apos;[EXECUTE] process lot of data.&apos;);</div><div class="line">        for ($i = 0; $i &amp;lt; $this-&gt;loop; $i++) &#123;</div><div class="line">            $this-&gt;log(&apos;step:&apos; . ($i + 1));</div><div class="line">            sleep(1);</div><div class="line">        &#125;</div><div class="line">        return rand(1, $this-&gt;loop);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function run()</div><div class="line">    &#123;</div><div class="line">        $this-&gt;log(&apos;[RUN] worker starting to run ...&apos;);</div><div class="line">        while (true) &#123;</div><div class="line">            if ($this-&gt;shouldStop()) &#123;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            $this-&gt;log(&apos;processJobData Start ...&apos;);</div><div class="line">            try &#123;</div><div class="line">                $jobStatusInfo = $this-&gt;execute([]);</div><div class="line">                $this-&gt;log(&apos;processJobData end with: &apos; . var_export($jobStatusInfo, true));</div><div class="line">                unset($jobStatusInfo);</div><div class="line">            &#125; catch (Exception $ex) &#123;</div><div class="line">                $this-&gt;log($ex-&gt;getMessage());</div><div class="line">            &#125;</div><div class="line">            $memory = memory_get_usage();</div><div class="line">            $this-&gt;log(&apos;memory usage:&apos; . sprintf(&apos;%.2fMB&apos;, round($memory / 1048576, 2)));</div><div class="line">            if ($memory &gt; self::$memLimit) &#123;</div><div class="line">                $this-&gt;log(&apos;exiting run due to memory limit&apos;);</div><div class="line">                exit;</div><div class="line">            &#125;</div><div class="line">            //sleep(1);</div><div class="line">            usleep(10);</div><div class="line">        &#125;</div><div class="line">        $this-&gt;log(&apos;[RUN] worker run quit.&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$gotMyParam = 10;</div><div class="line">if (isset($argv[1])) &#123;</div><div class="line">    $gotMyParam = intval(trim(strip_tags($argv[1])));</div><div class="line">&#125;</div><div class="line">$worker = new myDaemon([&apos;loop&apos; =&gt; $gotMyParam, &apos;memLimit&apos; =&gt; 1048576 * 128,]);</div><div class="line">$worker-&gt;run();</div></pre></td></tr></table></figure><p></p><p>也可以到我的coding上下载：</p><p><a href="https://coding.net/u/nickfan/p/mydevkit/git/blob/master/bin/daemon" target="_blank" rel="external">https://coding.net/u/nickfan/p/mydevkit/git/blob/master/bin/daemon</a></p><p><strong>测试：</strong></p><p>在class代码中的构造函数中注释掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//$this-&gt;regist_sig_handler();</div></pre></td></tr></table></figure><p></p><p>运行daemon代码，在执行execute的for循环时ctrl+c或者用 kill 杀死当前进程</p><p><a href="/uploads/posts/2015/07/Snip20150708_1.png"><img src="/uploads/posts/2015/07/Snip20150708_1.png" alt="Snip20150708_1"></a></p><p>进程直接结束，没有执行完execute的一个完整流程就直接退出了，</p><p>把注释去掉重新执行daemon代码：</p><p><a href="/uploads/posts/2015/07/Snip20150708_2.png"><img src="/uploads/posts/2015/07/Snip20150708_2.png" alt="Snip20150708_2"></a></p><p>在执行过程中按ctrl+c或者kill命令杀死前进程</p><p>观察daemon运行的结果是直到整个execute循环执行完了以后才退出程序的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作中同事需要做一个简单的工作进程，需要在进程结束时不能被硬生生的掐断当前正在执行的工作流程，需要等一个处理流程跑完了再结束，所以这时候就需要用到pcntl的信号量来工作了，主要的设计思路：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;捕获系统发给进程的中断的信号量&lt;/li&gt;&lt;li&gt;在handl
    
    </summary>
    
      <category term="dev" scheme="https://nickfan.github.io/categories/dev/"/>
    
    
      <category term="php" scheme="https://nickfan.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>laravel的oauth2-server相关开发的备忘</title>
    <link href="https://nickfan.github.io/2015/07/01/laravel-oauth2-tips/"/>
    <id>https://nickfan.github.io/2015/07/01/laravel-oauth2-tips/</id>
    <published>2015-07-01T02:53:52.000Z</published>
    <updated>2018-12-25T08:22:59.822Z</updated>
    
    <content type="html"><![CDATA[<p>开发当中踩了不少坑，做个备忘。</p><p>代码环境：</p><p><a href="http://d.laravel-china.org/docs/5.1" target="_blank" rel="external">laravel 5.1</a></p><p>oauth2-server服务组件：</p><p><a href="https://github.com/lucadegasperi/oauth2-server-laravel" target="_blank" rel="external">lucadegasperi/oauth2-server-laravel</a> 也就是 <a href="https://github.com/thephpleague/oauth2-server" target="_blank" rel="external">thephpleague/oauth2-server</a> 的laravel 包装版本</p><p>目前插件的版本是~4.1</p><p>需要注意的点是：</p><p>一般而言最常见的应用场景是grant_type为authorization_code的情景，</p><p>thephpleague的oauth2-server要求的数据提交必须是POST数据编码方式是application/x-www-form-urlencoded，默认情况下如果你用的是curl组件会以multipart/form-data模式编码提交的post数据，所以后端提交请求的时候注意一下， 如果你用的是curl，需要设置：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl_setopt($ch, CURLOPT_HTTPHEADER, array(&apos;Content-Type: application/x-www-form-urlencoded&apos;));</div></pre></td></tr></table></figure><p></p><p>如果你用的是GuzzleHttp的组件：参考<a href="http://guzzle.readthedocs.org/en/latest/quickstart.html#query-string-parameters" target="_blank" rel="external">官方的说明</a>：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$response = $client-&amp;gt;post(&apos;http://httpbin.org/post&apos;, [</div><div class="line">    &apos;form_params&apos; =&amp;gt; [</div><div class="line">        &apos;field_name&apos; =&amp;gt; &apos;abc&apos;,</div><div class="line">        &apos;other_field&apos; =&amp;gt; &apos;123&apos;,</div><div class="line">        &apos;nested_field&apos; =&amp;gt; [</div><div class="line">            &apos;nested&apos; =&amp;gt; &apos;hello&apos;</div><div class="line">        ]</div><div class="line">    ]</div><div class="line">]);</div></pre></td></tr></table></figure><p></p><p>其他的基础配置设定,插件作者的<a href="https://github.com/lucadegasperi/oauth2-server-laravel/wiki" target="_blank" rel="external">wiki</a>中已经有了说明，我这里做了一些自己的设定：</p><ul><li>不想关闭全局的csrf保护咋办？ 如果你是直接安装的laravel 5.1版不要关闭全局$middleware的csrf：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">    protected $middleware = array(</div><div class="line">    \Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,</div><div class="line">    \LucaDegasperi\OAuth2Server\Middleware\OAuthExceptionHandlerMiddleware::class,</div><div class="line">    \App\Http\Middleware\EncryptCookies::class,</div><div class="line">    \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,</div><div class="line">    \Illuminate\Session\Middleware\StartSession::class,</div><div class="line">    \Illuminate\View\Middleware\ShareErrorsFromSession::class,</div><div class="line">    \App\Http\Middleware\VerifyCsrfToken::class, // 不要关闭</div><div class="line">);</div></pre></td></tr></table></figure></li></ul><p>按wiki中的说明添加$routeMiddleware中的设定：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">protected $routeMiddleware = [</div><div class="line">    &apos;csrf&apos; =&amp;gt; \App\Http\Middleware\VerifyCsrfToken::class, // 添加 csrf配置</div><div class="line">    &apos;auth&apos; =&amp;gt; \App\Http\Middleware\Authenticate::class,</div><div class="line">    &apos;auth.basic&apos; =&amp;gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</div><div class="line">    &apos;guest&apos; =&amp;gt; \App\Http\Middleware\RedirectIfAuthenticated::class,</div><div class="line">    &apos;oauth&apos; =&amp;gt; \LucaDegasperi\OAuth2Server\Middleware\OAuthMiddleware::class,</div><div class="line">    &apos;oauth-owner&apos; =&amp;gt; \LucaDegasperi\OAuth2Server\Middleware\OAuthOwnerMiddleware::class,</div><div class="line">    &apos;check-authorization-params&apos; =&amp;gt; \LucaDegasperi\OAuth2Server\Middleware\CheckAuthCodeRequestMiddleware::class,</div><div class="line">];</div></pre></td></tr></table></figure><p></p><p>在你的\App\Http\Middleware\VerifyCsrfToken类中的$except变量添加：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">protected $except = [</div><div class="line">    //</div><div class="line">    &apos;api&apos;,</div><div class="line">    &apos;api/*&apos;,</div><div class="line">    &apos;oauth/access_token&apos;,</div><div class="line">];</div></pre></td></tr></table></figure><p></p><p>也就是：</p><ol><li>你的oauth服务获取access_token的入口地址，如果你换了地址修改这里对应的设置即可。</li><li>你使用oauth中间件保护的服务接口也不需要csrf做多余的防护，在此排除掉 api/* 这对应的前缀即可 如果是5.0之类的升级上来的，VerifyCsrfToken可能还是老的写法，不支持$except，自己改造一下符合新版规范：</li></ol><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">&lt;?php namespace App\Http\Middleware;</div><div class="line"></div><div class="line">use Closure;</div><div class="line">use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as BaseVerifier;</div><div class="line">use Illuminate\Session\TokenMismatchException;</div><div class="line"></div><div class="line">class VerifyCsrfToken extends BaseVerifier &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * The URIs that should be excluded from CSRF verification.</div><div class="line">     *</div><div class="line">     * @var array</div><div class="line">     */</div><div class="line">    protected $except = [</div><div class="line">        //</div><div class="line">        &apos;api/*&apos;,</div><div class="line">        &apos;oauth/access_token&apos;,</div><div class="line">    ];</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * Handle an incoming request.</div><div class="line">	 *</div><div class="line">	 * @param  \Illuminate\Http\Request  $request</div><div class="line">	 * @param  \Closure  $next</div><div class="line">	 * @return mixed</div><div class="line">	 */</div><div class="line">	public function handle($request, Closure $next)</div><div class="line">	&#123;</div><div class="line">        if ($this-&amp;gt;isReading($request) || $this-&amp;gt;shouldPassThrough($request) || $this-&amp;gt;tokensMatch($request)) &#123;</div><div class="line">            return $this-&amp;gt;addCookieToResponse($request, $next($request));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        throw new TokenMismatchException;</div><div class="line">		//return parent::handle($request, $next);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Determine if the request has a URI that should pass through CSRF verification.</div><div class="line">     *</div><div class="line">     * @param  \Illuminate\Http\Request  $request</div><div class="line">     * @return bool</div><div class="line">     */</div><div class="line">    protected function shouldPassThrough($request)</div><div class="line">    &#123;</div><div class="line">        foreach ($this-&amp;gt;except as $except) &#123;</div><div class="line">            if ($request-&amp;gt;is($except)) &#123;</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><ul><li>本地登录授权的页面（View::make('oauth.authorization-form')）该怎么写？ 原来官方的wiki中没有，放狗找了一圈的issue list才凑合着写了一个放了上去，作者插件的wiki里我已改过了：</li></ul><p><strong>注意提交的form原先GET请求中的querystring是需要一并post的 这个坑要注意一下。</strong></p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@extends(&apos;app&apos;)</div><div class="line"></div><div class="line">@section(&apos;content&apos;)</div><div class="line">    &amp;lt;div class=&quot;row&quot;&amp;gt;</div><div class="line">        &#123;!! Form::open([&apos;method&apos; =&amp;gt; &apos;POST&apos;,&apos;class&apos;=&amp;gt;&apos;form-horizontal&apos;, &apos;url&apos;=&amp;gt; route(&apos;oauth.authorize.post&apos;,$params)]) !!&#125;</div><div class="line">        &amp;lt;div class=&quot;form-group&quot;&amp;gt;</div><div class="line">            &amp;lt;dl class=&quot;dl-horizontal&quot;&amp;gt;</div><div class="line">                &amp;lt;dt&amp;gt;Client Name&amp;lt;/dt&amp;gt;</div><div class="line">                &amp;lt;dd&amp;gt;&#123;&#123;$client-&amp;gt;getName()&#125;&#125;&amp;lt;/dd&amp;gt;</div><div class="line">            &amp;lt;/dl&amp;gt;</div><div class="line">        &amp;lt;/div&amp;gt;</div><div class="line">        &#123;!! Form::hidden(&apos;client_id&apos;, $params[&apos;client_id&apos;]) !!&#125;</div><div class="line">        &#123;!! Form::hidden(&apos;redirect_uri&apos;, $params[&apos;redirect_uri&apos;]) !!&#125;</div><div class="line">        &#123;!! Form::hidden(&apos;response_type&apos;, $params[&apos;response_type&apos;]) !!&#125;</div><div class="line">        &#123;!! Form::hidden(&apos;state&apos;, $params[&apos;state&apos;]) !!&#125;</div><div class="line">        &#123;!! Form::submit(&apos;Approve&apos;, [&apos;name&apos;=&amp;gt;&apos;approve&apos;, &apos;value&apos;=&amp;gt;1, &apos;class&apos;=&amp;gt;&apos;btn btn-success&apos;]) !!&#125;</div><div class="line">        &#123;!! Form::submit(&apos;Deny&apos;, [&apos;name&apos;=&amp;gt;&apos;deny&apos;, &apos;value&apos;=&amp;gt;1, &apos;class&apos;=&amp;gt;&apos;btn bg-danger&apos;]) !!&#125;</div><div class="line">        &#123;!! Form::close() !!&#125;</div><div class="line">    &amp;lt;/div&amp;gt;</div><div class="line">@endsection</div></pre></td></tr></table></figure><p></p><p>而对应的$params在controller中的设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$authParams = Authorizer::getAuthCodeRequestParams();</div><div class="line">$formParams = array_except($authParams,&apos;client&apos;);</div><div class="line">$formParams[&apos;client_id&apos;] = $authParams[&apos;client&apos;]-&amp;gt;getId();</div><div class="line">return View::make(&apos;oauth.authorization-form&apos;, [&apos;params&apos;=&amp;gt;$formParams,&apos;client&apos;=&amp;gt;$authParams[&apos;client&apos;]]);</div></pre></td></tr></table></figure><p></p><p>最后在你被oauth保护的api接口中你就可以获得到对应的当前用户id了：</p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$uid = Authorizer::getResourceOwnerId();</div></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发当中踩了不少坑，做个备忘。&lt;/p&gt;&lt;p&gt;代码环境：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://d.laravel-china.org/docs/5.1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;laravel 5.1&lt;/a&gt;&lt;/p&gt;&lt;p&gt;oaut
    
    </summary>
    
      <category term="dev" scheme="https://nickfan.github.io/categories/dev/"/>
    
      <category term="laravel" scheme="https://nickfan.github.io/categories/dev/laravel/"/>
    
    
      <category term="laravel" scheme="https://nickfan.github.io/tags/laravel/"/>
    
      <category term="php" scheme="https://nickfan.github.io/tags/php/"/>
    
      <category term="oauth" scheme="https://nickfan.github.io/tags/oauth/"/>
    
  </entry>
  
  <entry>
    <title>世界，你好！</title>
    <link href="https://nickfan.github.io/2015/03/09/hello-world/"/>
    <id>https://nickfan.github.io/2015/03/09/hello-world/</id>
    <published>2015-03-09T23:48:40.000Z</published>
    <updated>2018-12-25T08:22:59.822Z</updated>
    
    <content type="html"><![CDATA[<p>再一次搬家，其实写博客在现代而言已经貌似成为了史前人类的习惯，之前博客的数据也感觉鸡肋，索性清空自己重头来过。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;再一次搬家，其实写博客在现代而言已经貌似成为了史前人类的习惯，之前博客的数据也感觉鸡肋，索性清空自己重头来过。&lt;/p&gt;
    
    </summary>
    
      <category term="uncategorized" scheme="https://nickfan.github.io/categories/uncategorized/"/>
    
    
  </entry>
  
</feed>
